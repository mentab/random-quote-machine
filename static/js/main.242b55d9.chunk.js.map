{"version":3,"sources":["RandomQuoteMachine.js","index.js"],"names":["DEFAULT_QUOTE","DEFAULT_STATE","quote","fetching","requestingQuote","type","receivedQuote","store","createStore","state","arguments","length","undefined","action","applyMiddleware","thunk","RandomQuoteMachine","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchQuote","bind","assertThisInitialized","content","react_default","a","createElement","RandomQuoteMachine_FetchingQuote","RandomQuoteMachine_ViewQuote","RandomQuoteMachine_NewQuote","RandomQuoteMachine_ShareQuote","id","className","Component","ShareQuote","role","aria-pressed","href","concat","text","author","target","rel","NewQuote","onClick","ViewQuote","FetchingQuote","connect","dispatch","setTimeout","faker","hacker","noun","phrase","render","es","src_RandomQuoteMachine","document","getElementById"],"mappings":"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","file":"static/js/main.242b55d9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { createStore, applyMiddleware } from 'redux';\nimport { connect } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport faker from 'faker';\n\n// redux:\nconst REQUESTING_QUOTE = 'REQUESTING_QUOTE';\nconst RECEIVED_QUOTE = 'RECEIVED_QUOTE';\n\nconst DEFAULT_QUOTE = {};\nconst DEFAULT_FETCHING = false;\nconst DEFAULT_STATE = {\n  quote: DEFAULT_QUOTE,\n  fetching: DEFAULT_FETCHING\n}\n\nconst changeQuote = () => {\n  return function (dispatch) {\n    dispatch(requestingQuote());\n    setTimeout(() => {\n      const quote = {\n        author: faker.hacker.noun(),\n        text: faker.hacker.phrase()\n      }\n      dispatch(receivedQuote(quote))\n    }, 500);\n  }\n}\n\nconst requestingQuote = () => {\n  return {\n    type: REQUESTING_QUOTE,\n    quote: DEFAULT_QUOTE\n  }\n}\n\nconst receivedQuote = (quote) => {\n  return {\n    type: RECEIVED_QUOTE,\n    quote\n  }\n}\n\nconst quoteReducer = (state = DEFAULT_STATE, action) => {\n  switch (action.type) {\n    case REQUESTING_QUOTE:\n      return {\n        quote: DEFAULT_QUOTE,\n        fetching: true\n      };\n    case RECEIVED_QUOTE:\n      return {\n        quote: action.quote,\n        fetching: false\n      }\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(\n  quoteReducer,\n  applyMiddleware(thunk)\n);\n\n// react\nclass RandomQuoteMachine extends Component {\n  constructor(props) {\n    super(props);\n    this.fetchQuote = this.fetchQuote.bind(this);\n  }\n  componentDidMount() {\n    this.props.fetchQuote();\n  }\n  fetchQuote() {\n    this.props.fetchQuote();\n  }\n  render() {\n    let content;\n    if (this.props.fetching) {\n      content = <FetchingQuote />;\n    } else {\n      content = <div>\n        <ViewQuote quote={this.props.quote} />\n        <NewQuote fetchQuote={this.fetchQuote} />\n        <ShareQuote quote={this.props.quote} />\n      </div>;\n    }\n    return (\n      <div id=\"quote-box\" className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-6 offset-3 jumbotron p-5 mt-5\">\n            {content}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst ShareQuote = (props) => {\n  return (\n    <div className=\"pt-2\">\n      <a className=\"btn btn-secondary twitter-share-button\"\n        role=\"button\"\n        aria-pressed=\"true\"\n        id=\"tweet-quote\"\n        href={`https://twitter.com/intent/tweet?text=${props.quote.text}-${props.quote.author}`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\">\n        Share quote\n      </a>\n    </div>\n  );\n};\n\nconst NewQuote = (props) => {\n  return (\n    <button id=\"new-quote\"\n      type=\"button\"\n      className=\"btn btn-primary\"\n      onClick={props.fetchQuote}>\n      New quote\n    </button>\n  );\n};\n\nconst ViewQuote = (props) => {\n  return (\n    <blockquote className=\"blockquote text-right\">\n      <p id=\"text\"\n        className=\"mb-0\">\n        {props.quote.text}\n      </p>\n      <footer id=\"author\"\n        className=\"blockquote-footer\">\n        {props.quote.author}\n      </footer>\n    </blockquote>\n  )\n}\n\nconst FetchingQuote = () => {\n  return (\n    <div>Fetching quote...</div>\n  )\n}\n\nViewQuote.propTypes = {\n  quote: PropTypes.object\n}\n\n// react-redux\nconst mapStateToProps = (state) => {\n  return {\n    quote: state.quote,\n    fetching: state.fetching\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchQuote: () => {\n      dispatch(changeQuote());\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps)(RandomQuoteMachine);\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {Provider} from 'react-redux';\nimport RandomQuoteMachine, {store} from './RandomQuoteMachine';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nrender(\n    <Provider store={store}>\n        <RandomQuoteMachine />\n    </Provider>, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}