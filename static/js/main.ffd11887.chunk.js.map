{"version":3,"sources":["RandomQuoteMachine.js","index.js"],"names":["DEFAULT_QUOTE","store","createStore","state","arguments","length","undefined","action","type","quote","RandomQuoteMachine","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newQuote","bind","assertThisInitialized","author","text","react_default","a","createElement","id","RandomQuoteMachine_ViewQuote","RandomQuoteMachine_NewQuote","RandomQuoteMachine_ShareQuote","Component","NewQuote","onClick","ViewQuote","ShareQuote","href","defaultProps","connect","dispatch","render","es","src_RandomQuoteMachine","document","getElementById"],"mappings":"4NAQMA,EAAgB,GAkBTC,EAAQC,YATA,WAAmC,IAAlCC,EAAkCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1BJ,EAAeO,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAOC,EAAOC,MACV,IAbI,MAcA,OAAOD,EAAOE,MAClB,QACI,OAAON,KAMbO,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,SAAWP,EAAKO,SAASC,KAAdP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFCA,0EAKjBG,KAAKJ,MAAMQ,SAAS,CAClBG,OAAQ,SACRC,KAAM,0CAIR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAACE,EAAD,CAAWnB,MAAOM,KAAKJ,MAAMF,QAC7Be,EAAAC,EAAAC,cAACG,EAAD,CAAUV,SAAUJ,KAAKI,WACzBK,EAAAC,EAAAC,cAACI,EAAD,cAhByBC,aAsB3BC,EAAW,SAACrB,GAChB,OACEa,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YACHM,QAAStB,EAAMQ,UADvB,cAOEe,EAAY,SAACvB,GACjB,OACEa,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,GAAG,QACFhB,EAAMF,MAAMc,MAEhBC,EAAAC,EAAAC,cAAA,KAAGC,GAAG,UACFhB,EAAMF,MAAMa,UAMhBa,EAAa,WACjB,OACEX,EAAAC,EAAAC,cAAA,KAAGC,GAAG,cACHS,KAAK,KADR,gBAOJF,EAAUG,aAAe,CACvB5B,MAAO,CACLa,OAAQ,8BACRC,KAAM,8BAUV,IAcee,cAdS,SAACnC,GACvB,MAAO,CACHM,MAAON,IAIc,SAACoC,GAC1B,MAAO,CACHpB,SAAU,SAACV,GACP8B,EA7FO,SAAC9B,GACd,MAAO,CACHD,KANI,MAOJC,SA0FWU,CAASV,OAKb6B,CAEO5B,GCzGtB8B,iBACIhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAUxC,MAAOA,GACbuB,EAAAC,EAAAC,cAACgB,EAAD,OAEJC,SAASC,eAAe","file":"static/js/main.ffd11887.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {createStore} from 'redux';\nimport {connect} from 'react-redux';\n\n// redux:\nconst NEW = 'NEW';\n// TODO fetch data\nconst DEFAULT_QUOTE = {};\n\nconst newQuote = (quote) => {\n    return {\n        type: NEW,\n        quote\n    }\n}\n\nconst quoteReducer = (state = DEFAULT_QUOTE, action) => {\n    switch(action.type) {\n        case NEW:\n            return action.quote;\n        default:\n            return state;\n    }\n}\n\nexport const store = createStore(quoteReducer);\n\nclass RandomQuoteMachine extends Component {\n  constructor(props) {\n    super(props);\n    this.newQuote = this.newQuote.bind(this);\n  }\n  newQuote() {\n    this.props.newQuote({\n      author: 'author',\n      text: 'text'\n    });\n  }\n  render() {\n    return (\n      <div id=\"quote-box\">\n        <ViewQuote quote={this.props.quote} />\n        <NewQuote newQuote={this.newQuote} />\n        <ShareQuote />\n      </div>\n    );\n  }\n}\n\nconst NewQuote = (props) => {\n  return (\n    <button id=\"new-quote\"\n            onClick={props.newQuote}>\n      New quote\n    </button>\n  );\n};\n\nconst ViewQuote = (props) => {\n  return (\n    <div>\n      <p id=\"text\">\n        { props.quote.text }\n      </p>\n      <p id=\"author\">\n        { props.quote.author }\n      </p>\n    </div>\n  );\n};\n\nconst ShareQuote = () => {\n  return (\n    <a id=\"tweet-quote\"\n       href=\"#\">\n      Share quote\n    </a>\n  );\n};\n\nViewQuote.defaultProps = {\n  quote: {\n    author: 'Author of the quote default',\n    text: 'Text of the quote default'\n  }\n}\n\nViewQuote.propTypes = {\n  quote: PropTypes.object.isRequired\n}\n\n\n// react-redux\nconst mapStateToProps = (state) => {\n  return {\n      quote: state\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      newQuote: (quote) => {\n          dispatch(newQuote(quote));\n      }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps)(RandomQuoteMachine);\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {Provider} from 'react-redux';\nimport RandomQuoteMachine, {store} from './RandomQuoteMachine';\n\nrender(\n    <Provider store={store}>\n        <RandomQuoteMachine />\n    </Provider>, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}