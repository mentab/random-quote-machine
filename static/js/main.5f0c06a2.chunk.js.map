{"version":3,"sources":["RandomQuoteMachine.js","index.js"],"names":["DEFAULT_QUOTE","requestingQuote","type","receivedQuote","quote","store","createStore","state","arguments","length","undefined","action","fetching","applyMiddleware","thunk","RandomQuoteMachine","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchQuote","bind","assertThisInitialized","react_default","a","createElement","id","RandomQuoteMachine_ViewQuote","RandomQuoteMachine_NewQuote","RandomQuoteMachine_ShareQuote","Component","NewQuote","onClick","ViewQuote","text","character","ShareQuote","href","defaultProps","connect","dispatch","fetch","then","res","console","log","render","es","src_RandomQuoteMachine","document","getElementById"],"mappings":"oOAUMA,EAAgB,GAchBC,EAAkB,WACpB,MAAO,CACHC,KAnBiB,qBAuBnBC,EAAgB,SAACC,GACnB,MAAO,CACHF,KAxBe,iBAyBfE,MAAOA,IAqBFC,EAAQC,YAjBA,WAAmC,IAAlCC,EAAkCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1BR,EAAeW,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtD,OAAOC,EAAOT,MACZ,IAhCqB,mBAiCnB,MAAO,CACLU,UAAU,EACVR,MAAO,IAEX,IApCmB,iBAqCjB,MAAO,CACLQ,UAAU,EACVR,MAAOO,EAAOP,OAElB,QACE,OAAOG,IAMXM,YAAgBC,MAGZC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,WAAaP,EAAKO,WAAWC,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFDA,mFAKjBG,KAAKJ,MAAMQ,kDAGXJ,KAAKJ,MAAMQ,8CAGX,OACEG,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAACE,EAAD,CAAW3B,MAAOgB,KAAKJ,MAAMZ,QAC7BuB,EAAAC,EAAAC,cAACG,EAAD,CAAUR,WAAYJ,KAAKI,aAC3BG,EAAAC,EAAAC,cAACI,EAAD,cAhByBC,aAsB3BC,EAAW,SAACnB,GAChB,OACEW,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YACHM,QAASpB,EAAMQ,YADvB,cAOEa,EAAY,SAACrB,GACjB,OACEW,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,GAAG,QACHd,EAAMZ,MAAMkC,MAEfX,EAAAC,EAAAC,cAAA,KAAGC,GAAG,UACHd,EAAMZ,MAAMmC,aAMfC,EAAa,WACjB,OACEb,EAAAC,EAAAC,cAAA,KAAGC,GAAG,cACHW,KAAK,KADR,gBAOJJ,EAAUK,aAAe,CACvBtC,MAAO,CACLmC,UAAW,wBACXD,KAAM,mCAUV,IAceK,cAdS,SAACpC,GACvB,MAAO,CACHH,MAAOG,IAIc,SAACqC,GAC1B,MAAO,CACHpB,WAAY,WACRoB,EAxHD,SAASA,GAEd,OADAA,EAAS3C,KACF4C,MAAM,gDACZC,KAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZH,EAASzC,EAAc4C,EAAI,YAwHlBJ,CAEO5B,GCxItBmC,iBACIvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAU9C,MAAOA,GACbsB,EAAAC,EAAAC,cAACuB,EAAD,OAEJC,SAASC,eAAe","file":"static/js/main.5f0c06a2.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {createStore, applyMiddleware} from 'redux';\nimport {connect} from 'react-redux';\nimport thunk from 'redux-thunk';\n\n// redux:\nconst REQUESTING_QUOTE = 'REQUESTING_QUOTE';\nconst RECEIVED_QUOTE = 'RECEIVED_QUOTE';\n\nconst DEFAULT_QUOTE = {};\n\n// Todo handle errors\nconst changeQuote = () => {\n  return function(dispatch) {\n    dispatch(requestingQuote());\n    return fetch('https://thesimpsonsquoteapi.glitch.me/quotes')\n    .then(res => {\n      console.log(res);\n      dispatch(receivedQuote(res[0]))\n    });\n  }\n}\n\nconst requestingQuote = () => {\n    return {\n        type: REQUESTING_QUOTE\n    }\n}\n\nconst receivedQuote = (quote) => {\n    return {\n        type: RECEIVED_QUOTE,\n        quote: quote\n    }\n}\n\nconst quoteReducer = (state = DEFAULT_QUOTE, action) => {\n  switch(action.type) {\n    case REQUESTING_QUOTE:\n      return {\n        fetching: true,\n        quote: []\n      };\n    case RECEIVED_QUOTE:\n      return {\n        fetching: false,\n        quote: action.quote\n      }\n    default:\n      return state;\n    }\n}\n\nexport const store = createStore(\n  quoteReducer,\n  applyMiddleware(thunk)\n);\n\nclass RandomQuoteMachine extends Component {\n  constructor(props) {\n    super(props);\n    this.fetchQuote = this.fetchQuote.bind(this);\n  }\n  componentDidMount() {\n    this.props.fetchQuote();\n  }\n  fetchQuote() {\n    this.props.fetchQuote();\n  }\n  render() {\n    return (\n      <div id=\"quote-box\">\n        <ViewQuote quote={this.props.quote} />\n        <NewQuote fetchQuote={this.fetchQuote} />\n        <ShareQuote />\n      </div>\n    );\n  }\n}\n\nconst NewQuote = (props) => {\n  return (\n    <button id=\"new-quote\"\n            onClick={props.fetchQuote}>\n      New quote\n    </button>\n  );\n};\n\nconst ViewQuote = (props) => {\n  return (\n    <div>\n      <p id=\"text\">\n        {props.quote.text}\n      </p>\n      <p id=\"author\">\n        {props.quote.character}\n      </p>\n    </div>\n  );\n};\n\nconst ShareQuote = () => {\n  return (\n    <a id=\"tweet-quote\"\n       href=\"#\">\n      Share quote\n    </a>\n  );\n};\n\nViewQuote.defaultProps = {\n  quote: {\n    character: 'There is nothing here',\n    text: 'It\\s more or less the same here'\n  }\n}\n\nViewQuote.propTypes = {\n  quote: PropTypes.object.isRequired\n}\n\n\n// react-redux\nconst mapStateToProps = (state) => {\n  return {\n      quote: state\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      fetchQuote: () => {\n          dispatch(changeQuote());\n      }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps)(RandomQuoteMachine);\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {Provider} from 'react-redux';\nimport RandomQuoteMachine, {store} from './RandomQuoteMachine';\n\nrender(\n    <Provider store={store}>\n        <RandomQuoteMachine />\n    </Provider>, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}