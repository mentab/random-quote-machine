{"version":3,"sources":["reducers/initialState.js","actions/quoteActions.js","actions/allActions.js","components/FetchingQuote.js","components/NewQuote.js","components/ShareQuote.js","components/ViewQuote.js","components/RandomQuoteMachine.js","reducers/quoteReducer.js","store/configureStore.js","index.js"],"names":["DEFAULT_QUOTE","DEFAULT_STATE","quote","fetching","requestingQuote","type","receivedQuote","FetchingQuote","react_default","a","createElement","NewQuote","props","id","className","onClick","fetchQuote","ShareQuote","role","aria-pressed","href","concat","text","author","target","rel","ViewQuote","RandomQuoteMachine","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","content","components_FetchingQuote","components_ViewQuote","components_NewQuote","components_ShareQuote","Component","propTypes","PropTypes","object","connect","state","dispatch","setTimeout","faker","hacker","noun","phrase","quoteReducer","arguments","length","undefined","action","configureStore","createStore","applyMiddleware","thunk","store","render","es","components_RandomQuoteMachine","document","getElementById"],"mappings":"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","file":"static/js/main.5d5df5bc.chunk.js","sourcesContent":["export const DEFAULT_QUOTE = {};\r\nexport const DEFAULT_FETCHING = false;\r\nexport const DEFAULT_STATE = {\r\n    quote: DEFAULT_QUOTE,\r\n    fetching: DEFAULT_FETCHING\r\n}","import faker from 'faker';\r\nimport { DEFAULT_QUOTE } from '../reducers/initialState';\r\nimport { REQUESTING_QUOTE, RECEIVED_QUOTE } from './allActions';\r\n\r\nexport const changeQuote = () => {\r\n  return function (dispatch) {\r\n    dispatch(requestingQuote());\r\n    setTimeout(() => {\r\n      const quote = {\r\n        author: faker.hacker.noun(),\r\n        text: faker.hacker.phrase()\r\n      }\r\n      dispatch(receivedQuote(quote))\r\n    }, 500);\r\n  }\r\n}\r\n\r\nconst requestingQuote = () => {\r\n  return {\r\n    type: REQUESTING_QUOTE,\r\n    quote: DEFAULT_QUOTE\r\n  }\r\n}\r\n\r\nconst receivedQuote = (quote) => {\r\n  return {\r\n    type: RECEIVED_QUOTE,\r\n    quote\r\n  }\r\n}","export const REQUESTING_QUOTE = 'REQUESTING_QUOTE';\r\nexport const RECEIVED_QUOTE = 'RECEIVED_QUOTE';","import React from 'react';\r\n\r\nconst FetchingQuote = () => {\r\n    return (\r\n        <div>Fetching quote...</div>\r\n    )\r\n}\r\n\r\nexport default FetchingQuote;","import React from 'react';\r\n\r\nconst NewQuote = (props) => {\r\n    return (\r\n        <button id=\"new-quote\"\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={props.fetchQuote}>\r\n            New quote\r\n      </button>\r\n    );\r\n};\r\n\r\nexport default NewQuote;","import React from 'react';\r\n\r\nconst ShareQuote = (props) => {\r\n    return (\r\n        <div className=\"pt-2\">\r\n            <a className=\"btn btn-secondary twitter-share-button\"\r\n                role=\"button\"\r\n                aria-pressed=\"true\"\r\n                id=\"tweet-quote\"\r\n                href={`https://twitter.com/intent/tweet?text=${props.quote.text}-${props.quote.author}`}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\">\r\n                Share quote\r\n            </a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShareQuote;","import { PropTypes } from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst ViewQuote = (props) => {\r\n    return (\r\n        <blockquote className=\"blockquote text-right\">\r\n            <p id=\"text\"\r\n                className=\"mb-0\">\r\n                {props.quote.text}\r\n            </p>\r\n            <footer id=\"author\"\r\n                className=\"blockquote-footer\">\r\n                {props.quote.author}\r\n            </footer>\r\n        </blockquote>\r\n    )\r\n}\r\n\r\nViewQuote.propTypes = {\r\n    quote: PropTypes.object\r\n}\r\n\r\nexport default ViewQuote;","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { changeQuote } from '../actions/quoteActions';\nimport FetchingQuote from './FetchingQuote';\nimport NewQuote from './NewQuote';\nimport ShareQuote from './ShareQuote';\nimport ViewQuote from './ViewQuote';\n\n// react\nclass RandomQuoteMachine extends Component {\n  constructor(props) {\n    super(props);\n    this.fetchQuote = this.fetchQuote.bind(this);\n  }\n  componentDidMount() {\n    this.props.fetchQuote();\n  }\n  fetchQuote() {\n    this.props.fetchQuote();\n  }\n  render() {\n    let content;\n    if (this.props.fetching) {\n      content = <FetchingQuote />;\n    } else {\n      content = <div>\n        <ViewQuote quote={this.props.quote} />\n        <NewQuote fetchQuote={this.fetchQuote} />\n        <ShareQuote quote={this.props.quote} />\n      </div>;\n    }\n    return (\n      <div id=\"quote-box\" className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-6 offset-3 jumbotron p-5 mt-5\">\n            {content}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nViewQuote.propTypes = {\n  quote: PropTypes.object\n}\n\n// react-redux\nconst mapStateToProps = (state) => {\n  return {\n    quote: state.quote,\n    fetching: state.fetching\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchQuote: () => {\n      dispatch(changeQuote());\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps)(RandomQuoteMachine);\n","import { RECEIVED_QUOTE, REQUESTING_QUOTE } from '../actions/allActions';\r\nimport { DEFAULT_QUOTE, DEFAULT_STATE } from './initialState';\r\n\r\nconst quoteReducer = (state = DEFAULT_STATE, action) => {\r\n    switch (action.type) {\r\n        case REQUESTING_QUOTE:\r\n            return {\r\n                quote: DEFAULT_QUOTE,\r\n                fetching: true\r\n            };\r\n        case RECEIVED_QUOTE:\r\n            return {\r\n                quote: action.quote,\r\n                fetching: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default quoteReducer;","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport quoteReducer from './../reducers/quoteReducer';\r\n\r\nconst configureStore = () => createStore(\r\n    quoteReducer,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nexport default configureStore;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport RandomQuoteMachine from './components/RandomQuoteMachine';\nimport configureStore from './store/configureStore';\nimport React from 'react';\nimport { render } from 'react-dom';\n\nconst store = configureStore();\n\nrender(\n    <Provider store={store}>\n        <RandomQuoteMachine />\n    </Provider>, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}